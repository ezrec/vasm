This chapter describes the oldstyle syntax module suitable
for some 8-bit CPUs (6502, 680x, Z80, etc.),
which is available with the extension @code{oldstyle}.

@section Legal

    This module is copyright in 2002-2010 by Frank Wille.

    This archive may be redistributed without modifications and used
    for non-commercial purposes.

    Distributing modified versions and commercial usage needs my written
    consent.

    Certain modules may fall under additional copyrights.

@section Additional options for this version
 
This syntax module provides the following additional options:
 
@table @option
 
@item -dotdir
 Directives have to be preceded by a dot (@code{.}).

@end table

@section General Syntax

Labels always start at the first column and may be terminated by a
colon (@code{:}), but don't need to. In the last case the mnemonic
needs to be separated from the label by whitespace (not required in
any case, e.g. @code{=}).

Local labels are preceded by '@code{.}' or terminated by '@code{$}'.
For the rest, any alphanumeric character including '@code{_}' is allowed.
Local labels are valid between two global label definitions.

The operands are separated from the mnemonic by whitespace. Multiple
operands are separated by comma (@code{,}).

Make sure that you don't define a label on the same line as a
directive for conditional assembly (if, else, endif)! This is not supported.

Comments are introduced by the comment character @code{;}.
The rest of the line will be ignored.

Example:

@code{mylabel instr op1,op2  ;comment}

In expressions, numbers starting with @code{$} are hexadecimal (e.g.
@code{$fb2c}). @code{%} introduces binary numbers (e.g. @code{%1100101}).
Numbers starting with @code{@@} are assumed to be octal numbers, e.g.
@code{@@237}. All numbers starting with a digit are decimal, e.g. 
@code{1239}.


@section Directives

The following directives are supported by this syntax module (if the
CPU- and output-module allow it):

@table @code
@item <symbol> = <expression>
      Equivalent to @code{<symbol> equ <expression>}.

@item addr <exp1>[,<exp2>...]
      Equivalent to @code{word <exp1>[,<exp2>...]}.

@item align <bitcount>
      Insert as much zero bytes as required to reach an address where
      <bit_count> low order bits are zero. For example @code{align 2} would
      make an alignment to the next 32-bit boundary.

@item asc <exp1>[,<exp2>,"<string1>"...]
      Equivalent to @code{byte <exp1>[,<exp2>,"<string1>"...]}.

@item ascii <exp1>[,<exp2>,"<string1>"...]
      See @code{defm}. 

@item  asciiz "<string1>"[,"<string2>"...]
      See @code{string}. 

@item binary <file>
      Inserts the binary contents of <file> into the object code at
      this position. The file will be searched first in the current
      directory, then in all paths defined by @option{-I} or @code{incdir}
      in the order of occurence.

@item blk <exp>[,<fill>]
      Insert <exp> zero or <fill> bytes into the current section.

@item blkw <exp>[,<fill>]
      Insert <exp> zero or <fill> 16-bit words into the current section,
      using the endianess of the target CPU.

@item byt
      Increases the program counter by one.
      Equivalent to @code{blk 1,0}.

@item byte <exp1>[,<exp2>,"<string1>"...]
      Assign the integer or string constant operands into successive
      bytes of memory in the current section. Any combination of integer
      and character string constant operands is permitted.

@item data <exp1>[,<exp2>,"<string1>"...]
      Equivalent to @code{byte <exp1>[,<exp2>,"<string1>"...]}.

@item db <exp1>[,<exp2>,"<string1>"...]
      Equivalent to @code{byte <exp1>[,<exp2>,"<string1>"...]}.

@item dc <exp>[,<fill>]
      Equivalent to @code{blk <exp>[,<fill>]}.

@item defb <exp1>[,<exp2>,"<string1>"...]
      Equivalent to @code{byte <exp1>[,<exp2>,"<string1>"...]}.

@item defc <symbol> = <expression>
      Define a new program symbol with the name <symbol> and assign to it
      the value of <expression>. Defining <symbol> twice will cause
      an error.

@item defl <exp1>[,<exp2>...]
      Assign the values of the operands into successive 32-bit integers
      of memory in the current section, using the endianess of the target
      CPU.

@item defp <exp1>[,<exp2>...]
      Assign the values of the operands into successive 24-bit integers
      of memory in the current section, using the endianess of the target
      CPU.

@item defm "string"
      Equivalent to @code{text "string"}.

@item defw <exp1>[,<exp2>...]
      Equivalent to @code{word <exp1>[,<exp2>...]}.

@item dfb <exp1>[,<exp2>,"<string1>"...]
      Equivalent to @code{byte <exp1>[,<exp2>,"<string1>"...]}.

@item dfw <exp1>[,<exp2>...]
      Equivalent to @code{word <exp1>[,<exp2>...]}.

@item defs <exp>[,<fill>]
      Equivalent to @code{blk <exp>[,<fill>]}.

@item ds <exp>[,<fill>]
      Equivalent to @code{blk <exp>[,<fill>]}.

@item dsb <exp>[,<fill>]
      Equivalent to @code{blk <exp>[,<fill>]}.

@item dsw <exp>[,<fill>]
      Equivalent to @code{blkw <exp>[,<fill>]}.

@item dw <exp1>[,<exp2>...]
      Equivalent to @code{word <exp1>[,<exp2>...]}.

@item end
      Assembly will terminate behind this line.

@item endif
      Ends a section of conditional assembly.

@item el
      Equivalent to @code{else}.

@item else
      Assemble the following lines when the previous @code{if}-condition
      was false.

@item ei
      Equivalent to @code{endif}. (Not available for Z80 CPU)

@item endm
      Ends a macro definition.

@item endmac
      Ends a macro definition.

@item endmacro
      Ends a macro definition.

@item endr
      Ends a repetition block.

@item endrep
      Ends a repetition block.

@item endrepeat
      Ends a repetition block.

@item <symbol> eq <expression>
      Equivalent to @code{<symbol> equ <expression>}.

@item <symbol> equ <expression>
      Define a new program symbol with the name <symbol> and assign to it
      the value of <expression>. Defining <symbol> twice will cause
      an error.

@item extern  <symbol>[,<symbol>...]
        See @code{global}.

@item even
      Aligns to an even address. Equivalent to @code{align 1}.

@item fill <exp>
      Equivalent to @code{blk <exp>,0}.

@item global <symbol>[,<symbol>...]
      Flag <symbol> as an external symbol, which means that <symbol> is
      visible to all modules in the linking process. It may be either
      defined or undefined.  

@item if <expression>
      Conditionally assemble the following lines if <expression> is non-zero.

@item ifdef <symbol>
      Conditionally assemble the following lines if <symbol> is defined.

@item ifndef <symbol>
      Conditionally assemble the following lines if <symbol> is undefined.

@item ifeq <expression>
      Conditionally assemble the following lines if <expression> is zero.

@item ifne <expression>
      Conditionally assemble the following lines if <expression> is non-zero.

@item ifgt <expression>
      Conditionally assemble the following lines if <expression> is
      greater than zero.

@item ifge <expression>
      Conditionally assemble the following lines if <expression> is
      greater than zero or equal.

@item iflt <expression>
      Conditionally assemble the following lines if <expression> is
      less than zero.

@item ifle <expression>
      Conditionally assemble the following lines if <expression> is
      less than zero or equal.

@item incbin <file>
      Inserts the binary contents of <file> into the object code at
      this position. The file will be searched first in the current
      directory, then in all paths defined by @option{-I} or @code{incdir}
      in the order of occurence.

@item incdir <path>
      Add another path to search for include files to the list of
      known paths. Paths defined with @option{-I} on the command line are
      searched first.

@item include <file>
      Include source text of <file> at this position. The include file
      will be searched first in the current directory, then in all
      paths defined by @option{-I} or @code{incdir} in the order of
      occurence.

@item mac <name>
      Equivalent to @code{macro <name>}.

@item local <symbol>[,<symbol>...]
      Flag <symbol> as a local symbol, which means that <symbol> is
      local for the current file and invisible to other modules in
      the linking process.

@item macro <name>
      Defines a macro which can be referenced by <name>. The <name>
      may also appear at the left side of the @code{macro} directive,
      starting at the first column. The macro definition is closed
      by an @code{endm} directive. When calling a macro you may pass
      up to 9 arguments, separated by comma. Those arguments are
      referenced within the macro context as @code{\1} to @code{\9}.
      Argument @code{\0} is set to the macro's first qualifier
      (mnemonic extension), when given.
      The special argument @code{\@@} inserts a unique id, useful for
      defining labels.

@item mdat <file>
      Equivalent to @code{incbin <file>}.

@item org <expression>
      Sets the base address for the subsequent code. This is equivalent
      to @code{*=<expression>}.

@item repeat <expression>
      Equivalent to @code{rept <expression>}.

@item rept <expression>
      Repeats the assembly of the block between @code{rept} and @code{endr}
      <expression> number of times. <expression> has to be positive.

@item reserve <exp>
      Equivalent to @code{blk <exp>,0}.

@item section <name>[,"<attributes>"]
      Starts a new section named <name> or reactivate an old one. If
      attributes are given for an already existing section, they must
      match exactly. The section's name will also be defined as a new
      symbol, which represents the section's start address.
      The "<attributes>" string may consist of the following characters:

      Section Contents:
@table @code
@item c 
         section has code

@item d 
         section has initialized data

@item u 
         section has uninitialized data

@item i 
         section has directives (info section)

@item n 
         section can be discarded
            
@item R 
         remove section at link time
            
@item a 
         section is allocated in memory
@end table

      Section Protection:

@table @code          
@item r
         section is readable
            
@item w
         section is writable
           
@item x
         section is executable
           
@item s
         section is sharable
@end table

      Section Alignment (only one):

@table @code
            
@item 0 
         align to byte boundary
            
@item 1 
         align to halfword boundary
            
@item 2 
         align to word boundary
            
@item 3 
         align to doubleword boundary
           
@item  4 
         align to quadword boundary
           
@item 5 
         align to 32 byte boundary
           
@item 6 
         align to 64 byte boundary
@end table

@item spc <exp>
      Equivalent to @code{blk <exp>,0}.

@item string "<string1>"[,"<string2>"...]
        Like @code{string}, but adds a terminating zero-byte.

@item text "string"
      Places a single string constant operands into successive bytes of
      memory in the current section.

@item weak <symbol>[,<symbol>...]
      Flag <symbol> as a weak symbol, which means that <symbol> is
      visible to all modules in the linking process and may be replaced
      by any global symbol with the same name.
      When a weak symbol remains undefined its value defaults to 0.

@item wor <exp1>[,<exp2>...]
      Equivalent to @code{word <exp1>[,<exp2>...]}.

@item wrd
      Increases the program counter by two.
      Equivalent to @code{blkw 1,0}.

@item word <exp1>[,<exp2>...]
      Assign the values of the operands into successive 16-bit words
      of memory in the current section, using the endianess of the target
      CPU.

@item xdef  <symbol>[,<symbol>...]
        See @code{global}.

@item xlib  <symbol>[,<symbol>...]
        See @code{global}.

@item xref  <symbol>[,<symbol>...]
        See @code{global}.

@end table

@section Known Problems

    Some known problems of this module at the moment:

@itemize @minus

@item Addresses assigned to @code{org} or to the current pc symbol @code{'*'}
(on the z80 the pc symbol is @code{'$'})  must be constant.
@item Expressions in an @code{if} directive must be constant.

@end itemize

@section Error Messages

This module has the following error messages:

@itemize @minus
@item 1001: syntax error
@item 1002: invalid extension
@item 1003: no space before operands
@item 1004: too many closing parentheses
@item 1005: missing closing parentheses
@item 1006: missing operand
@item 1007: garbage at end of line
@item 1008: %c expected
@item 1009: invalid data operand
@item 1010: , expected
@item 1011: identifier expected
@item 1012: illegal escape sequence \%c
@item 1013: expression must be a constant
@item 1014: repeatedly defined symbol
@item 1015: endif without if
@item 1016: if without endif
@item 1017: maximum if-nesting depth exceeded (%d levels)
@item 1018: else without if
@item 1019: unexpected endr without macro
@item 1020: unexpected endr without rept
@item 1021: cannot open binary file "%s"
@item 1022: symbol <%s> already defined with %s scope

@end itemize
